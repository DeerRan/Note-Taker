//importing required api
const express = require('express')
const http = require('http');
const fs = require('fs');
const path = require('path');
const { nanoid } = require('nanoid')

const app = express()

const PORT = process.env.PORT || 3000;

//Middleware
app.use(express.static('public'));
app.use(express.urlencoded({ extended: false }))
app.use(express.json())

//Default page is index
app.get('/', (req,res)=> {
    res.sendFile(path.resolve(__dirname, './public/index.html'))
})

//If pathed to /notes, bring up notes html
app.get('/notes', (req,res)=> {
    res.sendFile(path.resolve(__dirname, './public/notes.html'))
})

//Gets access json file
app.get('/api/notes', (req,res)=>{
    fs.readFile(__dirname + '/db/db.json', function (err, data) {
        var json = JSON.parse(data);
        res.json(json)
    })
})

app.post('/api/notes', (req, res) => {

    fs.readFile(__dirname + '/db/db.json', function (err, data) {
        //Gives array
        var json = JSON.parse(data); 

        //Sets an ID property with string generated by nanoid api
        req.body.id = nanoid(10);

        //Pushes the new ID into array
        json.push(req.body);

        //Rewrites db.json file with updated array
        fs.writeFile(__dirname + '/db/db.json', JSON.stringify(json), function(err){
            if (err) throw err;
        })
    });

    //Takes the user back to basic path with updated list
    res.sendFile(path.resolve(__dirname, './public/notes.html'));

})

app.delete('/api/notes/:id', (req, res) => {

    fs.readFile(__dirname + '/db/db.json', function (err, data) {
        //Gives us our array from db.json
        var json = JSON.parse(data); 

        //Grabs the ID from targeted note
        const { id } = req.params;

        //Searches array for a matching ID
        const note = json.find((note)=> note.id === id);

        //If it can't find a matching id, returns us to notes path
        if (!note) {
            res.sendFile(path.resolve(__dirname, './public/notes.html'))
        };

        //New array after filtering out the note with matching ID
        var newJson = json.filter((note)=> note.id !== id);

        //Rewriting the array w/o note
        fs.writeFile(__dirname + '/db/db.json', JSON.stringify(newJson), function(err){
            if (err) throw err;
        });
    });

    //Takes the user back to basic path with updated list
    res.sendFile(path.resolve(__dirname, './public/notes.html'));

})


//If at an unrecognized path, respond with err
app.get('*', (req,res)=> {
    res.sendFile(path.resolve(__dirname, './public/index.html'))
})

//Listening?
app.listen(PORT, ()=> {
    console.log(`Server is listening on port ${PORT}, http://localhost:${PORT}`)
})